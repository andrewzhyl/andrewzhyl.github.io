---
title:  "GO 编程基础"
date:   2016-05-30 18:27:00
description: 'GO 编程基础(一、二、三)'
---

# GO 编程基础

## (一) 开发环境

### GO 命令

#### 常用命令
- `go get` : 获取远程包(需 `提前安装` git 或hg)
- `go run`: 直接运行程序
- `go build`: 测试编译，检查是否有编译错误
- `go run`: 直接运行程序
- `go fmt`: 格式化源码
- `go install`:  编译包文件并编译整个程序
- `go test` : 运行测试文件
- `go doc` : 查看手册


```
godoc -http=:8080
```
在本地打开 golang 官网


#### GO 工作目录
- `bin` (存放编译后生成的可执行文件)
- `pkg` (存放编译后生成的包文件)
- `src` (存放项目源码)

## (二) Go基础知识

GO 程序的一般结构:  

- Go 程序是通过 `package` 来组织的 (与 python 类似)
- 只有 `package` 名称为 `main` 的包可以包含 `main` 函数
- 一个可执行程序，有且仅有一个 `main` 包
- 通过 `import ` 关键字导入其它非 `main` 包
- 通过 `const` 关键字进行常量的定义
- 通过在函数体外部使用 `var` 关键字来进行全局变量的声明与赋值
- 通过 `type` 关键字进行结构(`struct`) 或接口(`interface`) 的声明
- 通过 `func` 关键字来进行函数的声明

``` go
// 当前程序的包名
package main

// 导入其它的包
import std "fmt"

// 常量的定义
const PI = 3.14

// 全局变量的声明与赋值
var name = "gopher"

// 一般类型声明
type newType int

// 结构的声明
type gopher struct{}

// 接口的声明
type golang interface{}

// 由 main 函数作为程序入口点启动
func main() {
  std.Println("Hello world!你好，世界！")
}
```

### 可见性规则

Go 语言使用 `大小写` 来决定该常量、变量、类型、接口、结构或函数是否可以被外部包所调用：  
根据约定， `函数名` 首字母 `小写` 即为 `private`  
首字母 `大写` 即为 `public`  


### 组定义
常量组  

``` go
const (
  PI = 3.14
  const1 = "1"
  const2 = 2
  const3 = 3
)
```

全局变量组

``` go
var (
  name = "gopher"
  name1 = "1"
  name2 = 2
  name3 = 3
)
```

一般类型组

``` go
type(
  newType int
  type1 float32
  type2 string
  type3 byte
)
```

## (三) 类型与变量

### go 基本类型  

- 布尔型
- 整型: int/uint
- 8 位整型： int8/uint8
    - 长度：1字节
    - 取值范围：[-128,127]
- 字节型: byte(uint8别名)

- 复数： complex64/complex128
         -  长度：8/16 字节
- 足够保存指针的 32 位或 64 位整数型: uintptr
- 其它值类型：
         - array、struct、string
- 引用类型：
    - slice、map、chan
- 接口类型：interface
- 函数类型:   func

**类型零值**
零值并不等于空值，而是当变量被声明为某种类型后的默认值，通常情况下值类型的默认值为 0 
其它的非零值 bool 为 false, string 为空字符串

``` go
var a []int # 不指定数组大小，a 就是 slice（切片），切片是对数组的高层封装
```

**别名**
``` go
package main

import (
  "fmt"
  "math"
)

type (
  byte uint8  // 修改 byte 为 uint8,不推荐此用法
  文本   string // strign 别名为 文本
)

func main() {
  var b 文本
  b = "你好啊"
  fmt.Println(b)
  fmt.Println(math.MinInt32) // 输出 Int32 最小值
  fmt.Println(math.MaxInt32) // 输出 Int32 最大值
}
```

**单个变量的声明与赋值**
- 变量的声明格式： var <变量名称> <变量类型>
- 变量的赋值格式：<变量名称> = <表达式>
- 声明的同时赋值：var <变量名称> [变量类型] = <表达式>

``` go
  var a int       //变量的声明
  a = 123         //变量的赋值
  var b int = 321 //变量声明的同时赋值
  var c = 321     //省略变量类型，有系统推断
  d := 123        //变量声明与赋值的最简写法
```

`:` 冒号是用来替代 var 关键字的

**变量的类型转换**
- Go 中不存在隐式转换，所有类型转换必须显式
声明
- 转换只能发生在两种相互兼容的类型之间
- 类型转换的格式：
  <ValueA> [:]= <TypeOfValueA>(<ValueB>)
  
``` go
//在相互兼容的两种类型之间进行转换
var a float32 =1.1
b := int(a)

//以下表达式无法通过编译
var c bool = true
d := int(c)
```

整形到字符串
``` go
var i int = 1
var s string
s = strconv.Itoa(i) 或者 s = FormatInt(int64(i), 10) 
```

字符串到整形
``` go
var s string = "1"  
var i int  
i, err = strconv.Atoi(s) 或者 i, err = ParseInt(s, 10, 0) 
```

字符串到float(32 / 64)

``` go

```