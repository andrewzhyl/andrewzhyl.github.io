---
title:  "GO 编程基础八(map)"
date:   2016-07-09 16:14:00
description: '学习 map'
---

# GO 编程基础八(map)

- 李四其它语言中的哈希表或者字典，以 key-value 形式存储数据
- key 必须是支持 == 或者 != 比较运算的类型，不可以是函数、map 或 slice 
- map 查找比线性搜索快很多，但比使用索引访问数据的类型慢 100 倍
- map 使用 make() 创建，支持 `:=` 快速推导
- 键值对不存在时自动添加，使用 `delete` 删除某键值对
- 使用 `for range` 对 `map` 和 `slice` 进行迭代操作

**map 初始化方式**

``` go
var m map[int]string = map[int]string{} #第一种
var m map[int]string = make(map[int]string) # 第二种
m := make(map[int]string) # 最简单的方式，使用快速推导不需要 var

m[1] = "OK" # 赋值方式
delete(m, 1) # 删除 key 为 1 的键值对


m := make(map[int]map[int]string) # value 为一个 map
a, ok := m[2][1]    # 多返回值，Ok 表示值是否已存在
```

**切片遍历**

``` go
  s := []int{1, 2, 3, 4, 5, 6}
  for _, value := range s { // value 只是引用的值
    fmt.Println(value)
  }
```

**map迭代**

``` go
  m := make(map[int]string)
  m[1] = "andrew"
  m[2] = "jim"

  for key, value := range m { # value 只是引用值
    fmt.Println(key)
    fmt.Println(m[key])
  }
```

**map 间接排序**

``` go
import (
  "fmt"
  "sort"
)

func main() {
  m := map[int]string{1: "a", 2: "b", 3: "c", 4: "d", 5: "e"}
  s := make([]int, len(m))
  i := 0
  for k, _ := range m {
    s[i] = k
    i++
  }
  sort.Ints(s)
  fmt.Println(s)
}
```