---
title:  "GO 编程基础五(控制语句)"
date:   2016-06-13 18:40:00
description: 'GO 编程基础五(控制语句)'
---


# GO 编程基础五(控制语句)
@(学习笔记)

### 指针
GO 的指针不支持指针运算以及 `->` 运算符，直接采用 `.` 选择符来操作指针目标对象的成员

- 操作符 `&` 取变量地址用，使用 `*` 通过指针间接访问目标对象
- 默认值为 `nil` 而非 `NULL`

递增减语句
在 `GO` 当中， `++` 与 `--` 是作为语句而并不是作为表达式

### 判断语句 if

- 条件表达式没有括号
- 支持一个初始化表达式(可以使并行方式)
- 做大括号必须与 else 在同一行
- 支持单行模式
- 初始化语句中的变量为 block 级别，同时隐藏外部同名变量

if 有块级作用域

``` go
  a := 1
  if a := 2; a < 3 {
    fmt.Println(a)
  }
  fmt.Println(a)
/*
// 输出----------
2
1
*/

  a := 1
  if a = 2; a < 3 {
    fmt.Println(a)
  }
  fmt.Println(a)
/*
// 输出----------
2
2
*/
```

### for 循环
- go 只有 for 一个循环语句关键字，但支持 3 种形式
- 初始化和步进表达式可以使多个值
- 条件语句每次循环都会被重新检查，因此不建议在条件语句中使用函数，尽量提前计算好条件并以变量或常量代替
- 做大括号必须和条件语句在同一行

``` go
//第一种循环
func main() {
  a := 1
  for {
    a++
    if a > 3 {
      break
    }
    fmt.Println(a)
  }
  fmt.Println("Over")
}
// 第二种
func main() {
  a := 1
  for {
    a++
    if a > 3 {
      break
    }
    fmt.Println(a)
  }
  fmt.Println("Over")
}
// 第三种
func main() {
  a := 1
  for i := 0; i < 3; i++ {
    a++
    fmt.Println(a)
  }
  fmt.Println("Over")
}
```


